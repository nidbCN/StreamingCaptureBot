{
  "$schema": "https://json-schema.org/draft-07/schema#",
  "title": "Product",
  "description": "StreamingCaptureBot appsettings.",
  "type": "object",
  "properties": {
    "StreamOption": {
      "description": "live stream and de/encode configurations.",
      "type": "object",
      "properties": {
        "FfMpegLibrariesPath": {
          "description": "ffmpeg shared library location, should contain `avcodec-{ver}.dll` on Windows or `libavcodec.so.{ver}` on Linux/Unix. Ignore this value for `DllImport` impl, use \"\" on Linux for system default search locations(see `man dlopen`).",
          "type": "string"
        },
        "Url": {
          "description": "live stream Uri, can be rtsp/rtmp/http... etc, support all format that your ffmpeg build supported.",
          "type": "string"
        },
        "CacheTimeout":{
          "description": "default \"00:00:15\", cache time for last captured image",
          "type": "string"
        },
        "ConnectTimeout": {
          "description": "default 0, timeout value for connect to stream url, directly pass to ffmpeg if v > 0, see https://ffmpeg.org/ffmpeg-protocols.html",
          "type": "integer"
        },
        "CodecTimeout": {
          "description": "default \"00:00:12\", timeout to decode or encode a frame",
          "type": "string"
        },
        "CodecThreads": {
          "description": "recommend `<cpus>`, default auto-detect, threads to decode and encode, negivate or zero for auto-detect",
          "type": "integer"
        },
        "LogLevel": {
          "description": "this option will be merged to Logging",
          "type": "string"
        }
      },
      "required": [
        "Url"
      ]
    },
    "BotOption": {
      "description": "qq bot configurations.",
      "type": "object",
      "properties": {
        "AllowedGroups": {
          "description": "allowed groups, `null` for enable all, `[]` for disable all.",
          "type": "array",
          "items": {
            "description": "group number",
            "type": "integer",
            "minimum": 0
          }
        },
        "AllowedFriends": {
          "description": "allowed friends, `null` for enable all, `[]` for disable all.",
          "type": "array",
          "items": {
            "description": "friend number",
            "type": "integer",
            "minimum": 0
          }
        },
        "AdminAccounts": {
          "description": "admin accounts, `null` or `[]` for no admin.",
          "type": "array",
          "items": {
            "description": "friend number",
            "type": "integer",
            "minimum": 0
          }
        },
        "NotificationConfig": {
          "type": "object",
          "properties": {
            "NotifyAdminOnException": {
              "description": "default `true`.",
              "type": "boolean"
            },
            "NotifyWebhookOnException": {
              "description": "default `false`.",
              "type": "boolean"
            },
            "NotifyAdminOnHeartbeat": {
              "description": "default `false`.",
              "type": "boolean"
            },
            "NotifyWebhookOnHeartbeat": {
              "description": "default `false`.",
              "type": "boolean"
            },
            "HeartbeatInterval": {
              "description": "default \"02:00:00\".",
              "type": "string",
              "minimum": 0
            },
            "WebhookUrl": {
              "description": "webhook url, required when will `NotifyWebhookOn*` on. send HTTP POST to this url.",
              "type": "string"
            },
            "WebhookHeaders": {
              "description": "webhook request header.",
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "BotImplement": {
            "description": "default Lagrange, bot implement, lagrange or tencent offical",
            "type": "integer"
          },
          "required": []
        }
      },
      "required": []
    },
    "LagrangeImplOption": {
      "description": "lagrange bot implication configurations.",
      "type": "object",
      "properties": {
        "KeyStoreFile": {
          "description": "default keystore.json, located at located at `~/AppData/Local/IsolatedStorage/<random>/<random>/Url.<random>/AppFiles` on windows or `~/.local/share/IsolatedStorage/` on Lin/Unix",
          "type": "string"
        },
        "DeviceInfoFile": {
          "description": "default deviceInfo.json, located as same as `KeyStoreFile`",
          "type": "string"
        },
        "AccountPasswords": {
          "description": "bot accounts password dict, key: account uin, value: password info.",
          "type": "object",
          "properties": {
            "uin": {
              "description": "bot account uin.",
              "type": "object",
              "properties": {
                "Hashed": {
                  "description": "set true if you have hashed your password string to md5(lower)",
                  "type": "boolean"
                },
                "Password": {
                  "description": "bot account password, text or md5.",
                  "type": "string"
                }
              }
            }
          }
        },
        "LagrangeConfig": {
          "description": "framework config, see https://lagrangedev.github.io/Lagrange.Doc/Lagrange.Core/CreateBot/#botconfig-%E9%85%8D%E7%BD%AE%E7%B1%BB",
          "type": "object",
          "properties": {
            "AutoReconnect": {
              "type": "boolean"
            },
            "AutoReLogin": {
              "type": "boolean"
            },
            "UseIPv6Network": {
              "type": "boolean"
            },
            "GetOptimumServer": {
              "type": "boolean"
            },
            "Protocol": {
              "type": "integer"
            }
          },
          "additionalProperties": true,
          "required": []
        }
      }
    }
  },
  "required": [
    "StreamOption",
    "BotOption"
  ]
}